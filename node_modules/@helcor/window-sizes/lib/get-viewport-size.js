"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getViewportDimension = getViewportDimension;
exports.getViewportSize = getViewportSize;

var _detectNode = _interopRequireDefault(require("detect-node"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var VIEWPORT_SIZE_DEFAULT = {
  width: 1024,
  height: 768
};

function isNumber(data) {
  return typeof data === 'number';
}

function getViewportDimension(Name) {
  var name = Name.toLowerCase();
  var document = window.document;
  var documentElement = document.documentElement;
  var size; // IE6 & IE7 don't have window.innerWidth or innerHeight.

  if (window['inner' + Name] === undefined) {
    size = documentElement['client' + Name];
  } // WebKit doesn't include scrollbars while calculating viewport size so we
  // have to get fancy.
  else if (window['inner' + Name] !== documentElement['client' + Name]) {
      // Insert markup to test if a media query will match document.doumentElement["client" + Name]
      var bodyElement = document.createElement('body');
      bodyElement.id = 'vpw-test-b';
      bodyElement.style.cssText = 'overflow:scroll';
      var divElement = document.createElement('div');
      divElement.id = 'vpw-test-d';
      divElement.style.cssText = 'position:absolute;top:-1000px'; // Getting specific on the CSS selector so it won't get overridden easily.

      divElement.innerHTML = '<style>@media(' + name + ':' + documentElement['client' + Name] + 'px){body#vpw-test-b div#vpw-test-d{' + name + ':7px!important}}</style>';
      bodyElement.appendChild(divElement);
      documentElement.insertBefore(bodyElement, document.head); // Media query matches document.documentElement['client' + Name]

      if (divElement['offset' + Name] === 7) {
        size = documentElement['client' + Name];
      } // Media query didn't match, use window['inner' + Name]
      else {
          size = window['inner' + Name];
        } // Cleanup.


      documentElement.removeChild(bodyElement);
    } // Default to use window["inner" + Name].
    else {
        size = window['inner' + Name];
      }

  return size;
}

function getViewportSize() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      wMin = _ref.wMin,
      wMax = _ref.wMax,
      hMin = _ref.hMin,
      hMax = _ref.hMax;

  var defaultSize = arguments.length > 1 ? arguments[1] : undefined;

  if (_detectNode["default"]) {
    return _objectSpread(_objectSpread({}, VIEWPORT_SIZE_DEFAULT), defaultSize);
  }

  var width = getViewportDimension('Width');
  width = isNumber(wMin) ? Math.max(width, wMin) : width;
  width = isNumber(wMax) ? Math.min(width, wMax) : width;
  var height = getViewportDimension('Height');
  height = isNumber(hMin) ? Math.max(height, hMin) : height;
  height = isNumber(hMax) ? Math.min(height, hMax) : height;
  return {
    width: width,
    height: height
  };
}